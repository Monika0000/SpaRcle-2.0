//vec3 T = normalize(vec3(vec4(aTangent,   0.0)));
//vec3 N = normalize(vec3(vec4(aNormal,    0.0)));
//vec3 B = cross(N, T);
//TBN = transpose(mat3(T, B, N)); //TBN = mat3(T, B, N);

//vertex_vs = projMat * viewMat * vec4(aPosition + ObjPos, 1.0);
//gl_Position = projMat * viewMat * vec4(aPosition + ObjPos, 1.0);
//gl_Position = projMat * viewMat * vec4(aPosition, 1.0) * modelMat;
vs_out.FragPos = vec3(modelMat * vec4(aPosition, 1.0));
vs_out.TexCoords = aTexCoords;

gl_Position = projMat * viewMat * vec4(vs_out.FragPos, 1.0);
//gl_Position = projMat * viewMat * modelMat * vec4(aPosition, 1.0);
    
//gl_Position = projMat * viewMat * modelMat * 
//   vec4(aPosition + aNormal, 1.0);
    
//gl_Position = projMat * viewMat * modelMat * 
//    vec4(aPosition + Normal, 1.0);
    
//vs_out.Normal0 = mat3(transpose(inverse(modelMat))) * aNormal; 
//Normal0 = mat3(transpose(inverse(modelMat))) * aNormal; 
//Tangent0 = mat3(transpose(inverse(modelMat))) * aTangent; 
//Normal0 = (modelMat * vec4(aNormal, 1.0)).xyz;
//Tangent0 = (modelMat * vec4(aTangent, 0.0)).xyz;
//Normal    = aNormal;


//float rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }
